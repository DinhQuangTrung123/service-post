// Google sheet npm package
// import * as moment from 'moment';
// import moment = require('moment');
const { GoogleSpreadsheet, XLSX } = require('google-spreadsheet');
const { JWT, Credentials } = require('google-auth-library');
// import { GoogleSpreadsheet } from 'google-spreadsheet';
require('dotenv').config();
const request = require('request');
const { google } = require('googleapis');
const https = require('https'); // or 'https' for https:// URLs
// File handling package
const fs = require('fs');
// Credentials for the service account
const CREDENTIALS = JSON.parse(
  fs.readFileSync('organic-edge-396405-a3a47fddaa45.json'),
);

console.log('CREDENTIALS', CREDENTIALS);

const axios = require('axios');
const credentials = require('./organic-edge-396405-a3a47fddaa45.json');
const xlsx = require('xlsx');
console.log('credentials', credentials);
// console.log(process.env);
console.log(process.env.PRIVATE_KEY);
console.log(process.env.CLIENT_EMAIL);
console.log(process.env.SHEET_SPEADSHEED_ID);

// const PRIVATE_KEY = JSON.parse(`${process.env.PRIVATE_KEY}`);
// const CLIENT_EMAIL = process.env.CLIENT_EMAIL;
// const SHEET_SPEADSHEED_ID = process.env.SHEET_SPEADSHEED_ID;
const PRIVATE_KEY = CREDENTIALS.private_key;
const CLIENT_EMAIL = CREDENTIALS.client_email;
const SHEET_SPEADSHEED_ID = process.env.SHEET_SPEADSHEED_ID;

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: CLIENT_EMAIL,
  key: PRIVATE_KEY,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const doc = new GoogleSpreadsheet(SHEET_SPEADSHEED_ID, serviceAccountAuth);

const addRow = async () => {
  try {
    // const currentDate = new Date();

    // const format = 'HH:mm DD/MM/YYYY';

    // const formatedDate = moment(currentDate).format(format);
    // Initialize the sheet - doc ID is the long id in the sheets URL

    // // Initialize Auth - see more available options at https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
    // await doc.useServiceAccountAuth({
    //   client_email: CLIENT_EMAIL,
    //   private_key: PRIVATE_KEY,
    // });
    await doc.loadInfo(); // loads document properties and worksheets
    // console.log('doc', doc);
    console.log('doc', doc._spreadsheetUrl);
    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    // const sheet2 = doc.sheetsByIndex;
    // const sheet3 = sheet._rawProperties.sheetId;
    // console.log('sheet.title', sheet);
    // console.log('sheet.title', sheet.title);
    // console.log('sheet.length', sheet2.length);
    // Get all the rows
    // const rows = await sheet.getRows();
    // console.log('rows', rows.length);
    // console.log(rows[0].get('Email'));

    // append rows
    await sheet.addRow({
      Email: 'anhTung@gmail.com',
      Username: 'anhTung',
      Password: 'anhTung',
      Date: Date(),
    });
    console.log('Writing data to Google Sheet succeeds!');
    // return 'Writing data to Google Sheet succeeds!';
  } catch (e) {
    console.log(e);
  }
};

// addRow();

const deleteRow = async (keyValue, value) => {
  try {
    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    const rows = await sheet.getRows();
    const length = rows.length;
    // console.log('rows', rows);
    // await rows[1].delete();
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i].get(keyValue);
      console.log(row);
      console.log(row[i]);
      if (row === value) {
        await rows[i].delete();
      }
      break;
    }
    // return 'Writing data to Google Sheet succeeds!';
    console.log('length', length);
    console.log('Writing data to Google Sheet succeeds!');
  } catch (e) {
    console.log(e);
  }
};

// deleteRow('Email', 'trung456@gmail.com');

const updateRow = async (keyValue, value) => {
  try {
    await doc.loadInfo(); // loads document properties and worksheets
    const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
    const rows = await sheet.getRows();
    const length = rows.length;
    // console.log('rows', rows);
    // await rows[1].delete();
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i].get(keyValue);
      console.log(row);
      console.log(row[i]);
      if (row === value) {
        rows[i].assign({
          Email: 'anhTung@gmail.com',
          Username: 'anhTung123',
          Password: 'anhTung123',
          Date: Date(),
        });
        await rows[i].save();
      }
    }
    // return 'Writing data to Google Sheet succeeds!';
    console.log('length', length);
    console.log('Writing data to Google Sheet succeeds!');
  } catch (e) {
    console.log(e);
  }
};

// updateRow('Email', 'anhTung@gmail.com');

const downloadFile = async () => {
  try {
    // Load your credentials here
    //  const credentials = require('./path-to-your-credentials-file.json');

    // const auth = new google.auth.GoogleAuth({
    //   // CREDENTIALS,
    //   email: CLIENT_EMAIL,
    //   key: PRIVATE_KEY,
    //   scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    // });
    // const auth = new JWT({
    //   // env var values here are copied from service account credentials generated by google
    //   // see "Authentication" section in docs for more info
    //   email: CLIENT_EMAIL,
    //   key: PRIVATE_KEY,
    //   scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    // });

    // const sheets = google.sheets({ version: 'v4', auth });
    // const res = await sheets.spreadsheets.values.get({
    //   spreadsheetId: SHEET_SPEADSHEED_ID,
    //   range: `Sheet1!$A1`,
    // });

    // const link = res.data.values[0][0];
    // console.log(link);
    // console.log(res.config.url);
    // if (link) {
    //   console.log('+++++++++++++++++');
    //   const response = await axios.get(
    //     'https://docs.google.com/spreadsheets/d/1hMjyKC6aekFd8uqNQYSzabOqGECF8NkP6gy0HGnchdc/edit#gid=0',
    //     {
    //       responseType: 'arraybuffer',
    //     },
    //   );
    //   const fileName = 'downloaded-file.xlsx';
    //   console.log(response.data);
    // console.log(response);
    // const writer = fs.createWriteStream(fileName);
    // response.data.pipe(writer);
    // fs.writeFileSync(fileName, response.data, 'binary');
    // return new Promise((resolve, reject) => {
    //   writer.on('finish', resolve);
    //   writer.on('error', reject);
    // });
    const googleSheetsLink =
      'https://docs.google.com/spreadsheets/d/1hMjyKC6aekFd8uqNQYSzabOqGECF8NkP6gy0HGnchdc/edit#gid=0';

    const response = await request.get(googleSheetsLink);

    const response2 = await axios.get(googleSheetsLink);

    console.log(response2);

    const data = await response.pipe(
      fs.createWriteStream('YOUR_FILE_NAME.xlsx'),
    );
    console.log(data);

    console.log('File downloaded successfully.');
    // } else {
    //   throw new Error('No link found in the specified cell.');
    // }
  } catch (e) {
    console.log(e);
  }
};

// downloadFile();

// const XLSX = require('xlsx');

async function downloadExcelFromGoogleSheets() {
  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  await doc.loadInfo();

  const sheetNames = doc.sheetsByIndex.map((sheet) => sheet.title); //['Sheet1!A1:Z1000', 'sheet2'] // Change to your sheet names

  // const sheet = doc.sheetsByIndex[0];
  // const sheetTitles = doc.sheetsByIndex.map((sheet) => sheet.title);
  // console.log('sheet.title', sheetTitles);
  // console.log('sheet.title', sheet.title);
  // console.log(sheet.title);

  const sheets = google.sheets({ version: 'v4', auth });
  // const response = await sheets.spreadsheets.values.get({
  //   spreadsheetId: SHEET_SPEADSHEED_ID,
  //   // range: `Sheet1!A1:Z100`, // Adjust the range as needed,
  //   range: sheetNames,
  // });

  // // const link = response.data.values[0][0];

  // const rows = response.data.values;

  // if (rows.length === 0) {
  //   console.log('No data found.');
  //   return;
  // }

  // const worksheet = xlsx.utils.aoa_to_sheet(rows);
  const workbook = xlsx.utils.book_new();

  // xlsx.utils.book_append_sheet(workbook, worksheet, 'Sheet1');

  for (const sheetName of sheetNames) {
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_SPEADSHEED_ID,
      range: sheetName,
    });
    console.log(response);

    const rows = response.data.values;
    // console.log(rows);
    if (rows.length > 0) {
      const worksheet = xlsx.utils.aoa_to_sheet(rows);
      // console.log('worksheet', worksheet);
      xlsx.utils.book_append_sheet(workbook, worksheet, sheetName);
    } else {
      console.log(`No data found for sheet: ${sheetName}`);
    }
  }

  const filePath = 'downloaded-excel-file.xlsx'; // Change to desired filename
  xlsx.writeFile(workbook, filePath);

  console.log(`Excel file downloaded and saved as ${filePath}`);
}

// downloadExcelFromGoogleSheets().catch((error) => {
//   console.error('Error:', error.message);
// });

async function getToken() {
  const SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];
  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  const authToken = await auth.getClient();
  console.log('authToken', authToken);
  return authToken;
}
// getToken();

async function getSpreadSheet() {
  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const sheets = google.sheets({ version: 'v4', auth });
  const res = await sheets.spreadsheets.get({
    spreadsheetId: SHEET_SPEADSHEED_ID,
    auth,
  });
  console.log(res);
  return res;
}

// getSpreadSheet();

async function getSpreadSheetValues() {
  const auth = new google.auth.GoogleAuth({
    credentials,
    scopes: ['https://www.googleapis.com/auth/drive.readonly'],
  });
  const drive = google.drive({ version: 'v3', auth });
  const response = await drive.files.export(
    {
      fileId: '1TDQoqsyTqhyZ91_0P8e78H-WxaaA6anLV8R_MmWR-xA',
      mimeType:
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // MIME type for XLSX
    },
    { responseType: 'arraybuffer' },
  );

  const savePath = './field_download.xlsx';
  const buffer = Buffer.from(response.data);
  fs.writeFileSync(savePath, buffer);
  return 'ok';
}

getSpreadSheetValues();
